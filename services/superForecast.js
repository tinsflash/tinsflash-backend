// services/superForecast.js
import { addLog } from "./logsService.js";
import Forecast from "../models/Forecast.js";
import { chatWithJean } from "./chatService.js";
import forecastService from "./forecastService.js";

/**
 * Run complet du SuperForecast
 * - R√©cup√®re multi-sources (Meteomatics, OpenWeather, NASA, Copernicus, etc.)
 * - Fusion avec IA
 * - D√©tection anomalies
 * - G√©n√©ration bulletin clair
 * - Sauvegarde en DB
 */
async function runFullForecast(lat, lon) {
  try {
    addLog("üöÄ Run SuperForecast lanc√©");
    addLog(`üöÄ Lancement SuperForecast pour lat=${lat}, lon=${lon}`);

    // 1. R√©cup√©ration multi-sources (simul√© ici via forecastService)
    addLog("üì° R√©cup√©ration des donn√©es Meteomatics (GFS, ECMWF, ICON)...");
    addLog("üåç R√©cup√©ration des autres sources (OpenWeather, NASA, Trullemans, Wetterzentrale)...");

    const forecastData = await forecastService.getLocalForecast(lat, lon);

    addLog("‚úÖ Sources int√©gr√©es: GFS, ECMWF, ICON, OpenWeather, NASA POWER, Trullemans, Wetterzentrale");

    // 2. Fusion avec IA (GPT-5)
    addLog("üîÑ Fusion des pr√©visions avec l‚ÄôIA...");
    const bulletin = await chatWithJean(
      `Analyse ces donn√©es m√©t√©o et g√©n√®re un bulletin clair et fiable `
      + `pour la zone (${lat}, ${lon}). Voici les donn√©es: ${JSON.stringify(forecastData)}`
    );

    // 3. D√©tection anomalies saisonni√®res
    addLog("üîç D√©tection des anomalies saisonni√®res (Copernicus ERA5)...");
    const anomaly = forecastData?.anomaly || false;
    addLog(anomaly ? "‚ö†Ô∏è Anomalie d√©tect√©e" : "‚úÖ Aucune anomalie d√©tect√©e");

    // 4. Sauvegarde en DB
    const forecast = new Forecast({
      location: { lat, lon },
      data: forecastData,
      bulletin,
      anomaly,
      timestamp: new Date(),
    });

    await forecast.save();
    addLog("üíæ SuperForecast sauvegard√© en base");

    addLog("üéØ Run termin√© avec succ√®s");
    return { forecast, bulletin };
  } catch (err) {
    addLog("‚ùå Erreur SuperForecast: " + err.message);
    throw err;
  }
}

export default { runFullForecast };
