// PATH: services/superForecast.js
// ‚öôÔ∏è SuperForecast ‚Äì moteur IA fusion multi-mod√®les (ECMWF / GFS / ICON / etc.)

import { addEngineLog, addEngineError, saveEngineState, getEngineState } from "./engineState.js";
import forecastService from "./forecastService.js";
import * as alertsService from "./alertsService.js";
import aiFusionService from "./aiFusionService.js"; // Fusion IA (GraphCast / Pangu / Gemini / GPT-5)
import { getGlobalTimestamp } from "./timeUtils.js";

/**
 * üî• Fonction principale : superForecast()
 * Lance un cycle complet de pr√©vision et d'analyse
 * - R√©cup√©ration des mod√®les m√©t√©o
 * - Fusion IA
 * - D√©tection d'alertes
 * - Sauvegarde dans l'√©tat moteur
 */
export async function superForecast(zone = "Europe") {
  const cycleId = getGlobalTimestamp();
  await addEngineLog(`üåÄ D√©marrage SuperForecast pour la zone ${zone} [${cycleId}]`);

  // R√©cup√©rer l‚Äô√©tat actuel du moteur
  const state = await getEngineState();
  state.status = "running";
  state.checkup = state.checkup || {};
  state.checkup.engineStatus = "RUNNING";
  state.currentCycleId = cycleId;

  await saveEngineState(state);

  // === Liste des mod√®les ===
  const models = [
    "ECMWF",
    "GFS",
    "ICON",
    "Meteomatics",
    "Copernicus",
    "NASA",
    "OpenWeather",
    "Wetter3", // nouveau mod√®le interne
  ];

  const modelResults = {};
  const errors = [];

  /* === 1Ô∏è‚É£ Chargement des mod√®les m√©t√©o === */
  for (const model of models) {
    try {
      await addEngineLog(`üì° Chargement mod√®le ${model}...`);
      const data = await forecastService.getModelForecast(model, zone);

      if (data && Object.keys(data).length > 0) {
        modelResults[model] = data;
        state.checkup.models = state.checkup.models || {};
        state.checkup.models[model] = "ok";
        await addEngineLog(`‚úÖ ${model} charg√© (${Object.keys(data).length} points).`);
      } else {
        state.checkup.models[model] = "fail";
        throw new Error(`${model} a renvoy√© des donn√©es vides.`);
      }
    } catch (err) {
      errors.push(`[${model}] ${err.message}`);
      state.checkup.models = state.checkup.models || {};
      state.checkup.models[model] = "fail";
      await addEngineError(`‚ùå ${model}: ${err.message}`);
    }
  }

  /* === 2Ô∏è‚É£ Fusion IA === */
  try {
    await addEngineLog("üß† Fusion IA des mod√®les...");
    const fused = await aiFusionService.fuseModels(modelResults, zone);
    if (!fused) throw new Error("R√©sultat IA vide ou invalide.");
    state.checkup.steps = state.checkup.steps || {};
    state.checkup.steps.fusionIA = "ok";
    await addEngineLog("‚úÖ Fusion IA termin√©e avec succ√®s.");
  } catch (err) {
    state.checkup.steps = state.checkup.steps || {};
    state.checkup.steps.fusionIA = "fail";
    await addEngineError(`‚ùå Fusion IA: ${err.message}`);
    errors.push(`[FusionIA] ${err.message}`);
  }

  /* === 3Ô∏è‚É£ G√©n√©ration des alertes === */
  try {
    await addEngineLog("üö® G√©n√©ration des alertes pour zones couvertes...");
    const alerts = await alertsService.generateAlerts(zone, modelResults);
    state.checkup.steps.alertsCovered = "ok";
    await addEngineLog(`‚úÖ ${alerts.length} alertes g√©n√©r√©es (zones couvertes).`);

    if (zone === "Europe" || zone === "USA") {
      await addEngineLog("üåç G√©n√©ration des alertes continentales...");
      const cont = await alertsService.generateContinentalAlerts(zone);
      state.checkup.steps.alertsContinental = "ok";
      await addEngineLog(`‚úÖ ${cont.length} alertes continentales g√©n√©r√©es.`);
    }
  } catch (err) {
    state.checkup.steps.alertsCovered = "fail";
    await addEngineError(`‚ùå Erreur g√©n√©ration alertes: ${err.message}`);
    errors.push(`[Alertes] ${err.message}`);
  }

  /* === 4Ô∏è‚É£ Finalisation & sauvegarde === */
  state.status = errors.length > 0 ? "fail" : "ok";
  state.lastRun = new Date();
  state.checkup.engineStatus = errors.length > 0 ? "FAIL" : "OK";
  state.finalReport = { forecasts: modelResults };
  state.engineErrors = errors.map(e => ({ message: e, timestamp: new Date() }));

  await saveEngineState(state);

  if (errors.length > 0) {
    await addEngineLog("‚ö†Ô∏è SuperForecast termin√© avec erreurs. Voir engineErrors.");
  } else {
    await addEngineLog("‚úÖ SuperForecast termin√© avec succ√®s complet.");
  }

  return { ok: errors.length === 0, errors, modelsLoaded: Object.keys(modelResults).length };
}

// ‚úÖ Compatibilit√© r√©tro
export const runSuperForecast = superForecast;
export default { superForecast, runSuperForecast };
