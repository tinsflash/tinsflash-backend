// PATH: services/superForecast.js
import { addEngineLog, addEngineError, updateEngineState, saveEngineState } from "./engineState.js";
import forecastService from "./forecastService.js";
import * as alertsService from "./alertsService.js";
import aiFusionService from "./aiFusionService.js"; // fusion IA (GraphCast / Pangu / Gemini / GPT5)
import { getGlobalTimestamp } from "./timeUtils.js";

/**
 * üî• Fonction principale : superForecast()
 * Lance un cycle complet de pr√©vision et d'analyse
 * - R√©cup√©ration des mod√®les m√©t√©o
 * - Fusion IA
 * - D√©tection d'alertes
 * - Sauvegarde dans l'√©tat moteur
 */
export async function superForecast(zone = "Europe") {
  const cycleId = getGlobalTimestamp();
  await addEngineLog(`üåÄ D√©marrage SuperForecast pour la zone ${zone} [${cycleId}]`);
  await updateEngineState("status", "running");
  await updateEngineState("checkup.engineStatus", "RUNNING");
  await updateEngineState("currentCycleId", cycleId);

  const models = ["ECMWF", "GFS", "ICON", "Meteomatics", "Copernicus", "NASA", "OpenWeather"];
  const modelResults = {};
  const errors = [];

  // === 1Ô∏è‚É£ Chargement des mod√®les m√©t√©o ===
  for (const model of models) {
    try {
      await addEngineLog(`üì° Chargement mod√®le ${model}...`);
      const data = await forecastService.getModelForecast(model, zone);
      if (data && Object.keys(data).length > 0) {
        modelResults[model] = data;
        await updateEngineState(`checkup.models.${model}`, "ok");
        await addEngineLog(`‚úÖ ${model} charg√© (${Object.keys(data).length} points).`);
      } else {
        await updateEngineState(`checkup.models.${model}`, "fail");
        throw new Error(`${model} a renvoy√© des donn√©es vides.`);
      }
    } catch (err) {
      errors.push(`[${model}] ${err.message}`);
      await updateEngineState(`checkup.models.${model}`, "fail");
      await addEngineError(`‚ùå ${model}: ${err.message}`);
    }
  }

  // === 2Ô∏è‚É£ Fusion IA ===
  try {
    await addEngineLog("üß† Fusion IA des mod√®les...");
    const fused = await aiFusionService.fuseModels(modelResults, zone);
    if (!fused) throw new Error("R√©sultat IA vide ou invalide.");
    await updateEngineState("checkup.steps.fusionIA", "ok");
    await addEngineLog("‚úÖ Fusion IA termin√©e avec succ√®s.");
  } catch (err) {
    await updateEngineState("checkup.steps.fusionIA", "fail");
    await addEngineError(`‚ùå Fusion IA: ${err.message}`);
    errors.push(`[FusionIA] ${err.message}`);
  }

  // === 3Ô∏è‚É£ G√©n√©ration des alertes ===
  try {
    await addEngineLog("üö® G√©n√©ration des alertes pour zones couvertes...");
    const alerts = await alertsService.generateAlerts(zone, modelResults);
    await updateEngineState("checkup.steps.alertsCovered", "ok");
    await addEngineLog(`‚úÖ ${alerts.length} alertes g√©n√©r√©es (zones couvertes).`);

    // G√©n√©ration des alertes continentales
    if (zone === "Europe" || zone === "USA") {
      await addEngineLog("üåç G√©n√©ration des alertes continentales...");
      const cont = await alertsService.generateContinentalAlerts(zone);
      await updateEngineState("checkup.steps.alertsContinental", "ok");
      await addEngineLog(`‚úÖ ${cont.length} alertes continentales g√©n√©r√©es.`);
    }
  } catch (err) {
    await updateEngineState("checkup.steps.alertsCovered", "fail");
    await addEngineError(`‚ùå Erreur g√©n√©ration alertes: ${err.message}`);
    errors.push(`[Alertes] ${err.message}`);
  }

  // === 4Ô∏è‚É£ Finalisation & sauvegarde ===
  const state = {
    status: errors.length > 0 ? "fail" : "ok",
    lastRun: new Date(),
    checkup: {
      engineStatus: errors.length > 0 ? "FAIL" : "OK",
      zonesCovered: zone === "Europe" ? 30 : 1, // MAJ: plus de 27 pays
      models: Object.fromEntries(models.map(m => [m, modelResults[m] ? "ok" : "fail"])),
      steps: {
        superForecast: "ok",
        fusionIA: errors.find(e => e.includes("FusionIA")) ? "fail" : "ok",
        alertsCovered: errors.find(e => e.includes("Alertes")) ? "fail" : "ok",
        alertsContinental: "ok",
        deploy: "pending",
      },
    },
    finalReport: { forecasts: modelResults },
    engineErrors: errors.map(e => ({ message: e, timestamp: new Date() })),
  };

  await saveEngineState(state);

  if (errors.length > 0) {
    await addEngineLog("‚ö†Ô∏è SuperForecast termin√© avec erreurs. Voir engineErrors.");
  } else {
    await addEngineLog("‚úÖ SuperForecast termin√© avec succ√®s complet.");
  }

  return { ok: errors.length === 0, errors, modelsLoaded: Object.keys(modelResults).length };
}

// ‚úÖ Compatibilit√© r√©tro pour forecastService et autres modules
export const runSuperForecast = superForecast;

export default { superForecast, runSuperForecast };
