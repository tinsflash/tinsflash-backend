// PATH: services/superForecast.js
// SuperForecast ‚Äî pr√©visions enrichies multi-sources + facteurs environnementaux
// ‚ö° Centrale nucl√©aire m√©t√©o ‚Äì Moteur atomique

import { runGlobalEurope } from "./runGlobalEurope.js";
import { runGlobalUSA } from "./runGlobalUSA.js";
import gfs from "./gfs.js";
import ecmwf from "./ecmwf.js";
import icon from "./icon.js";
import meteomatics from "./meteomatics.js";
import nasaSat from "./nasaSat.js";
import copernicus from "./copernicusService.js";
import trullemans from "./trullemans.js";
import wetterzentrale from "./wetterzentrale.js";
import { applyGeoFactors } from "./geoFactors.js";   // ‚úÖ ajustements relief/climat
import { askOpenAI } from "./openaiService.js";     // ‚úÖ IA centrale
import { addEngineLog, addEngineError, saveEngineState, getEngineState } from "./engineState.js";

// ‚úÖ Export explicite
export async function runSuperForecastGlobal() {
  const state = getEngineState();
  try {
    addEngineLog("‚ö° Lancement du SuperForecast Global‚Ä¶");

    // === √âtape 1 : RUN Europe + USA ===
    addEngineLog("üåç RUN Europe (zones couvertes d√©taill√©es) ‚Ä¶");
    const europeData = await runGlobalEurope();

    addEngineLog("üá∫üá∏ RUN USA (√âtats + sous-r√©gions strat√©giques) ‚Ä¶");
    const usaData = await runGlobalUSA();

    // === √âtape 2 : Collecte multi-sources m√©t√©o ===
    addEngineLog("üì° Collecte des mod√®les et satellites‚Ä¶");
    const [
      gfsData, ecmwfData, iconData,
      meteomaticsData, nasaData, copernicusData,
      trullemansData, wetterzentraleData
    ] = await Promise.allSettled([
      gfs(),
      ecmwf(),
      icon(),
      meteomatics(),
      nasaSat(),
      copernicus("reanalysis-era5-land", { variable: ["2m_temperature", "total_precipitation"] }),
      trullemans(),
      wetterzentrale()
    ]);

    const sources = {
      gfs: gfsData.value ?? { error: gfsData.reason?.message },
      ecmwf: ecmwfData.value ?? { error: ecmwfData.reason?.message },
      icon: iconData.value ?? { error: iconData.reason?.message },
      meteomatics: meteomaticsData.value ?? { error: meteomaticsData.reason?.message },
      nasaSat: nasaData.value ?? { error: nasaData.reason?.message },
      copernicus: copernicusData.value ?? { error: copernicusData.reason?.message },
      trullemans: trullemansData.value ?? { error: trullemansData.reason?.message },
      wetterzentrale: wetterzentraleData.value ?? { error: wetterzentraleData.reason?.message }
    };

    addEngineLog("‚úÖ Sources m√©t√©o collect√©es");

    // === √âtape 3 : Fusion interne des mod√®les ===
    addEngineLog("üîÄ Fusion interne des mod√®les m√©t√©o‚Ä¶");
    const fusedModels = {
      temperature: {
        gfs: sources.gfs?.temperature,
        ecmwf: sources.ecmwf?.temperature,
        icon: sources.icon?.temperature,
        meteomatics: sources.meteomatics?.temperature
      },
      precipitation: {
        gfs: sources.gfs?.precipitation,
        ecmwf: sources.ecmwf?.precipitation,
        icon: sources.icon?.precipitation,
        meteomatics: sources.meteomatics?.precipitation
      },
      wind: {
        gfs: sources.gfs?.wind,
        ecmwf: sources.ecmwf?.wind,
        icon: sources.icon?.wind
      }
    };

    // === √âtape 4 : Facteurs relief/climat/environnement ===
    addEngineLog("‚õ∞Ô∏è Ajustements relief, climat, oc√©ans‚Ä¶");
    const adjustedData = await applyGeoFactors(fusedModels, europeData, usaData);

    // === √âtape 5 : IA Finale ===
    addEngineLog("ü§ñ Analyse IA finale‚Ä¶");
    const prompt = `
SuperForecast Global ‚Äî Synth√®se finale

Pr√©visions attendues :
1. Locales (Europe par pays/r√©gions + USA par √âtats/sous-r√©gions)
2. Nationales
3. Mondiales
4. Alertes locales, nationales, mondiales (r√®gles fiabilit√© incluses)

Sources fusionn√©es et ajust√©es:
${JSON.stringify(adjustedData)}

Zones internes couvertes:
Europe: ${JSON.stringify(europeData)}
USA: ${JSON.stringify(usaData)}

Comparatifs (qualit√© uniquement, ne pas copier):
Trullemans: ${JSON.stringify(sources.trullemans)}
Wetterzentrale: ${JSON.stringify(sources.wetterzentrale)}

R√®gles alertes:
- fiabilit√© <70% = ignor√©e
- 70‚Äì90% = attente / expert
- >90% = publi√©e automatiquement
    `;

    const analysis = await askOpenAI(prompt);
    addEngineLog("‚úÖ Analyse IA termin√©e");

    // === √âtape 6 : Sauvegarde ===
    state.superForecastGlobal = {
      europe: europeData,
      usa: usaData,
      fused: adjustedData,
      forecast: analysis,
      sources
    };
    saveEngineState(state);

    addEngineLog("üíæ SuperForecast Global sauvegard√©");
    addEngineLog("üèÅ Processus Global termin√© avec succ√®s");

    return state.superForecastGlobal;
  } catch (err) {
    addEngineError(err.message || "Erreur inconnue SuperForecast Global");
    addEngineLog("‚ùå √âchec du SuperForecast Global");
    return { error: err.message };
  }
}
