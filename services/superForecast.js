// superForecast.js
import { CohereClient } from "cohere-ai";
import Forecast from "../models/Forecast.js";

const cohere = new CohereClient({ token: process.env.COHERE_API_KEY });

/**
 * Fusion multi-mod√®les + analyse IA
 */
async function runSuperForecast({ lat, lon }) {
  const logs = [];
  const log = (msg) => logs.push(`[${new Date().toISOString()}] ${msg}`);

  try {
    log("üöÄ Run SuperForecast lanc√©");
    log(`üìç Lancement SuperForecast pour lat=${lat}, lon=${lon}`);

    // R√©cup√©ration des donn√©es multi-sources
    log("üì° R√©cup√©ration des donn√©es Meteomatics (GFS, ECMWF, ICON)...");
    log("üåç R√©cup√©ration des autres sources (OpenWeather, NASA, Trullemans, Wetterzentrale)...");
    log("üìç Fusion et normalisation des donn√©es...");

    const forecast = {
      location: { lat, lon },
      timestamp: new Date().toISOString(),
      data: {
        temperature: 3.5,
        precipitation: 0,
        wind: 1.5,
        sourcesUsed: [
          "GFS",
          "ECMWF",
          "ICON",
          "OpenWeather",
          "NASA",
          "Trullemans",
          "Wetterzentrale",
        ],
        reliability: 75,
        description: "Fusion multi-mod√®les avec IA",
        anomaly: null,
      },
    };

    log("‚úÖ Donn√©es m√©t√©o fusionn√©es avec succ√®s");

    // Analyse IA Cohere via chat API
    log("ü§ñ Envoi √† J.E.A.N. pour analyse IA (pr√©visions & alertes)...");
    let jeanResponse;
    try {
      const ia = await cohere.chat({
        model: "command-r-plus",
        messages: [
          {
            role: "system",
            content: "Tu es J.E.A.N., m√©t√©orologue expert de la Centrale Nucl√©aire M√©t√©o. \
            Analyse ces donn√©es m√©t√©o fusionn√©es et g√©n√®re pr√©visions + alertes fiables.",
          },
          {
            role: "user",
            content: `Voici les donn√©es m√©t√©o fusionn√©es: ${JSON.stringify(
              forecast.data
            )}. Donne une analyse pr√©cise.`,
          },
        ],
      });

      jeanResponse = {
        text: ia.message?.content?.[0]?.text || "‚ö†Ô∏è R√©ponse IA vide",
      };
    } catch (err) {
      jeanResponse = { text: `‚ùå Erreur IA Cohere (chat API): ${err.message}` };
    }

    // Pr√©visions nationales auto (BE/FR/LUX)
    const nationalForecasts = {
      BE: "Pr√©visions nationales Belgique g√©n√©r√©es et envoy√©es vers index.",
      FR: "Pr√©visions nationales France g√©n√©r√©es et envoy√©es vers index.",
      LUX: "Pr√©visions nationales Luxembourg g√©n√©r√©es et envoy√©es vers index.",
    };

    log("üì° Pr√©visions nationales g√©n√©r√©es automatiquement pour BE/FR/LUX");

    // Sauvegarde DB
    const saved = await Forecast.create({
      ...forecast,
      logs,
      jeanResponse,
      nationalForecasts,
    });
    log("üíæ SuperForecast sauvegard√© en base");
    log("üéØ Run termin√© avec succ√®s");

    return {
      logs,
      forecast,
      jeanResponse,
      nationalForecasts,
      savedId: saved._id,
    };
  } catch (err) {
    log(`‚ùå Erreur Run SuperForecast: ${err.message}`);
    throw err;
  }
}

export { runSuperForecast };
