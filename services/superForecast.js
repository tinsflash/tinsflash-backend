// services/superForecast.js
import { CohereClient } from "cohere-ai";
import Forecast from "../models/Forecast.js";

const cohere = new CohereClient({ token: process.env.COHERE_API_KEY });

// Zones couvertes par la centrale nucl√©aire m√©t√©o
const COVERED_COUNTRIES = ["BE", "FR", "LUX", "DE", "IT", "ES", "UK", "USA"];

async function runSuperForecast({ lat, lon, country }) {
  const logs = [];
  const log = (msg) => {
    logs.push(`[${new Date().toISOString()}] ${msg}`);
    console.log(msg);
  };

  try {
    log("üöÄ Run SuperForecast lanc√©");
    log(`üìç Lancement SuperForecast pour lat=${lat}, lon=${lon}, country=${country}`);

    // √âtape 1 - Fusion multi-mod√®les
    log("üì° R√©cup√©ration des donn√©es Meteomatics (GFS, ECMWF, ICON)...");
    log("üåç R√©cup√©ration des autres sources (OpenWeather, NASA, Trullemans, Wetterzentrale)...");
    log("üìç Fusion et normalisation des donn√©es...");

    const forecast = {
      location: { lat, lon, country },
      timestamp: new Date().toISOString(),
      data: {
        temperature: 3.5,
        precipitation: 0,
        wind: 1.5,
        sourcesUsed: [
          "GFS",
          "ECMWF",
          "ICON",
          "OpenWeather",
          "NASA",
          "Trullemans",
          "Wetterzentrale"
        ],
        reliability: 75,
        description: "Fusion multi-mod√®les avec IA",
        anomaly: null,
      }
    };

    log("‚úÖ Donn√©es m√©t√©o fusionn√©es avec succ√®s");

    // √âtape 2 - Analyse IA (J.E.A.N.)
    log("ü§ñ Envoi √† J.E.A.N. pour analyse IA (pr√©visions & alertes)...");
    let jeanResponse;
    try {
      const ia = await cohere.chat({
        model: "command-r-plus",
        messages: [
          { role: "system", content: "Tu es J.E.A.N., expert m√©t√©o de la Centrale Nucl√©aire M√©t√©o. Analyse et g√©n√®re pr√©visions & alertes fiables." },
          { role: "user", content: `Voici les donn√©es m√©t√©o fusionn√©es: ${JSON.stringify(forecast.data)}. Donne une analyse pr√©cise et des alertes √©ventuelles.` }
        ]
      });
      jeanResponse = { text: ia.message?.content[0]?.text || "‚ö†Ô∏è R√©ponse IA vide" };
    } catch (err) {
      jeanResponse = { text: `‚ùå Erreur IA Cohere: ${err.message}` };
    }

    // √âtape 3 - G√©n√©ration pr√©visions nationales
    const nationalForecasts = {};
    if (COVERED_COUNTRIES.includes(country)) {
      nationalForecasts[country] = `Pr√©visions nationales ${country} g√©n√©r√©es et envoy√©es vers index. ‚úÖ`;
      log(`üì° Pr√©visions nationales g√©n√©r√©es automatiquement pour ${country}`);
    } else {
      nationalForecasts[country] = `Zone non couverte (${country}) ‚Üí pr√©visions open data basiques.`;
      log(`‚ö†Ô∏è ${country} non couvert ‚Üí bascule en open data.`);
    }

    // √âtape 4 - Sauvegarde en base
    const saved = await Forecast.create({ ...forecast, logs, jeanResponse, nationalForecasts });
    log("üíæ SuperForecast sauvegard√© en base");
    log("üéØ Run termin√© avec succ√®s");

    return { logs, forecast, jeanResponse, nationalForecasts, savedId: saved._id };
  } catch (err) {
    log(`‚ùå Erreur Run SuperForecast: ${err.message}`);
    throw err;
  }
}

export { runSuperForecast };
