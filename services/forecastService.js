// services/forecastService.js
import Forecast from "../models/Forecast.js";
import { addLog } from "./logsService.js";

/**
 * G√©n√®re un texte clair pour le bulletin m√©t√©o local
 */
function generateLocalBulletin(forecast, country) {
  if (!forecast) {
    addLog("‚ö†Ô∏è Aucune donn√©e disponible pour le bulletin local");
    return "‚ö†Ô∏è Donn√©es locales indisponibles.";
  }

  const temp = forecast.temp ?? "N/A";
  const cond = forecast.condition ?? "N/A";

  return `Pr√©visions locales pour aujourd'hui (${country || "zone couverte"}): ${cond}, temp√©rature moyenne ${temp}¬∞C.`;
}

/**
 * G√©n√®re un texte clair pour le bulletin m√©t√©o national
 */
function generateNationalBulletin(forecast, country) {
  if (!forecast) {
    addLog("‚ö†Ô∏è Aucune donn√©e disponible pour le bulletin national");
    return "‚ö†Ô∏è Donn√©es nationales indisponibles.";
  }

  return `Pr√©visions nationales (${country}): tendance g√©n√©rale ${forecast.condition}, temp√©ratures moyennes autour de ${forecast.temp}¬∞C.`;
}

/**
 * üìç Pr√©visions locales
 */
async function getLocalForecast(lat, lon, country = "Europe/USA") {
  try {
    addLog(`üìç R√©cup√©ration pr√©visions locales pour lat=${lat}, lon=${lon}`);
    const forecast = await Forecast.findOne().sort({ timestamp: -1 });

    if (!forecast) {
      addLog("‚ö†Ô∏è Aucune donn√©e locale trouv√©e en base");
      return {
        forecast: null,
        bulletinLocal: "‚ö†Ô∏è Donn√©es locales indisponibles.",
      };
    }

    addLog("‚úÖ Pr√©visions locales r√©cup√©r√©es avec succ√®s");
    return {
      forecast,
      bulletinLocal: generateLocalBulletin(forecast?.data, country),
    };
  } catch (err) {
    addLog("‚ùå Erreur getLocalForecast: " + err.message);
    throw err;
  }
}

/**
 * üåç Pr√©visions nationales
 */
async function getNationalForecast(country = "Europe/USA") {
  try {
    addLog(`üåç R√©cup√©ration pr√©visions nationales pour ${country}`);
    const forecast = await Forecast.findOne().sort({ timestamp: -1 });

    if (!forecast) {
      addLog("‚ö†Ô∏è Aucune donn√©e nationale trouv√©e en base");
      return {
        forecast: null,
        bulletinNational: "‚ö†Ô∏è Donn√©es nationales indisponibles.",
      };
    }

    addLog("‚úÖ Pr√©visions nationales r√©cup√©r√©es avec succ√®s");
    return {
      forecast,
      bulletinNational: generateNationalBulletin(forecast?.data, country),
    };
  } catch (err) {
    addLog("‚ùå Erreur getNationalForecast: " + err.message);
    throw err;
  }
}

/**
 * üìÖ Pr√©visions 7 jours
 */
async function get7DayForecast(lat, lon, country = "Europe/USA") {
  try {
    addLog(`üìÖ R√©cup√©ration pr√©visions 7 jours pour lat=${lat}, lon=${lon}`);
    const forecasts = await Forecast.find().sort({ timestamp: -1 }).limit(7);

    if (!forecasts.length) {
      addLog("‚ö†Ô∏è Aucune donn√©e 7 jours trouv√©e en base");
      return {
        forecasts: [],
        bulletin7days: "‚ö†Ô∏è Donn√©es 7 jours indisponibles.",
      };
    }

    const textSummary = forecasts.map((f, i) => {
      return `Jour ${i + 1}: ${f.data.condition || "N/A"}, ${f.data.temp ?? "N/A"}¬∞C`;
    });

    addLog("‚úÖ Pr√©visions 7 jours r√©cup√©r√©es avec succ√®s");
    return {
      forecasts,
      bulletin7days: `Pr√©visions sur 7 jours (${country}): ${textSummary.join(" | ")}`,
    };
  } catch (err) {
    addLog("‚ùå Erreur get7DayForecast: " + err.message);
    throw err;
  }
}

/**
 * ‚úÖ Export complet (default + fonctions nomm√©es)
 */
export default {
  getLocalForecast,
  getNationalForecast,
  get7DayForecast,
};

export { getLocalForecast, getNationalForecast, get7DayForecast };
