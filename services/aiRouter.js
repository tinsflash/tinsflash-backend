// services/aiRouter.js
import express from "express";
import { askAI } from "./aiService.js";
import { getEngineState } from "./engineState.js";
import { getLogs } from "./adminLogs.js";
import forecastService from "./forecastService.js";
import fetch from "node-fetch";

const router = express.Router();

router.post("/", async (req, res) => {
  try {
    const { message, country } = req.body;

    // üîç Mode diagnostic moteur
    if (/moteur|erreur|√©tat|diagnostic/i.test(message)) {
      const state = getEngineState();
      const logs = getLogs().slice(0, 10);

      const prompt = `
Diagnostic demand√© sur le moteur m√©t√©o TINSFLASH.

√âtat actuel :
- runTime : ${state.runTime}
- Zones OK : ${Object.keys(state.zonesCovered || {}).filter(z => state.zonesCovered[z])}
- Zones KO : ${Object.keys(state.zonesCovered || {}).filter(z => !state.zonesCovered[z])}
- Erreurs : ${JSON.stringify(state.errors)}
- Derniers logs : ${logs.map(l => l.message).join(" | ")}

R√©ponds en fran√ßais, clair, professionnel et uniquement avec ces donn√©es.
`;
      const reply = await askAI(prompt);
      return res.json({ reply, location: null });
    }

    // üåç Si on d√©tecte une ville
    const cityMatch = message.match(/(?:√†|au|en)\s+([A-Za-z√Ä-√ø\s-]+)/i);
    const city = cityMatch ? cityMatch[1].trim() : null;

    let forecastData = null;
    let locationInfo = null;

    if (city && country) {
      // G√©ocodage de la ville
      const url = `https://nominatim.openstreetmap.org/search?format=json&limit=1&countrycodes=${country.toLowerCase()}&q=${encodeURIComponent(city)}`;
      const resGeo = await fetch(url, { headers: { "User-Agent": "Tinsflash-Meteo" } });
      const data = await resGeo.json();

      if (data.length) {
        locationInfo = {
          lat: parseFloat(data[0].lat),
          lon: parseFloat(data[0].lon),
          display_name: data[0].display_name
        };
        forecastData = await forecastService.getLocalForecast(locationInfo.lat, locationInfo.lon, country);
      }
    }

    // üõ∞Ô∏è Si pas de ville/pays ‚Üí fallback moteur
    if (!city || !country) {
      const state = getEngineState();
      const logs = getLogs().slice(0, 5);

      const prompt = `
R√©sum√© demand√© dans la console admin TINSFLASH.

Dernier run du moteur nucl√©aire m√©t√©o :
- Date : ${state.runTime}
- Zones couvertes OK : ${Object.keys(state.zonesCovered || {}).filter(z => state.zonesCovered[z])}
- Zones KO : ${Object.keys(state.zonesCovered || {}).filter(z => !state.zonesCovered[z])}
- Alertes d√©tect√©es : ${state.alertsList?.length || 0}
- Logs r√©cents : ${logs.map(l => l.message).join(" | ")}

Question pos√©e : "${message}"

R√©ponds uniquement avec ces donn√©es en bulletin m√©t√©o clair et professionnel.
`;
      const reply = await askAI(prompt);
      return res.json({ reply, location: null });
    }

    // üîÆ Si ville + pays d√©tect√©s ‚Üí pr√©visions locales
    const prompt = `
Tu es l'assistant m√©t√©o TINSFLASH (console admin).
Question : "${message}"

Ville : ${city || "‚ùå non d√©tect√©e"}
Pays : ${country || "‚ùå non sp√©cifi√©"}
Pr√©visions centrales : ${forecastData ? JSON.stringify(forecastData) : "‚ùå Aucune donn√©e"}
`;

    const reply = await askAI(prompt);
    res.json({ reply, location: locationInfo });
  } catch (err) {
    console.error("‚ùå Chat IA error:", err.message);
    res.status(500).json({ error: err.message });
  }
});

export default router;
