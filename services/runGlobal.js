// PATH: services/runGlobal.js
// ‚öôÔ∏è Moteur orchestral TINSFLASH ‚Äì Run Global r√©el et connect√©
// ‚úÖ Version int√©gr√©e avec PHASE 9 : √©volution automatique des alertes

import { runGlobalEurope } from "./runGlobalEurope.js";
import { runGlobalUSA } from "./runGlobalUSA.js";
import { runContinental } from "./runContinental.js";
import { runWorldAlerts } from "./runWorldAlerts.js";

import { generateAlerts, getActiveAlerts } from "./alertsService.js";
import { askOpenAI } from "./openaiService.js";
import { addEngineLog, addEngineError, getEngineState, saveEngineState } from "./engineState.js";
import { EUROPE_ZONES } from "./runGlobalEurope.js";
import { USA_ZONES } from "./runGlobalUSA.js";

import weatherGovService from "./weatherGovService.js"; // üá∫üá∏ NWS
import euroMeteoService from "./euroMeteoService.js";   // üá™üá∫ MeteoAlarm
import { runEvolution } from "./evolution.js";          // ‚ôªÔ∏è Nouveau suivi des alertes

export const ALL_ZONES = { ...EUROPE_ZONES, ...USA_ZONES };

/**
 * üåç Fonction principale : orchestrateur global du moteur
 * @param {"Europe"|"USA"|"All"} zone
 */
export async function runGlobal(zone = "All") {
  const state = await getEngineState();

  try {
    await addEngineLog(`üåç Lancement du RUN GLOBAL (${zone})`);
    state.status = "running";
    state.lastRun = new Date();
    state.checkup.engineStatus = "RUNNING";
    await saveEngineState(state);

    // === PHASE 1 : Pr√©visions zones couvertes ===
    await addEngineLog("üì° Phase 1 ‚Äì Pr√©visions zones couvertes (Europe / USA)");
    const forecasts = {};
    if (zone === "Europe" || zone === "All") {
      forecasts.Europe = await runGlobalEurope();
      await addEngineLog("‚úÖ Pr√©visions Europe OK");
    }
    if (zone === "USA" || zone === "All") {
      forecasts.USA = await runGlobalUSA();
      await addEngineLog("‚úÖ Pr√©visions USA OK");
    }
    state.checkup.models = "OK";
    state.checkup.localForecasts = "OK";
    await saveEngineState(state);

    // === PHASE 2 : Pr√©visions continentales (fallback) ===
    if (zone === "All") {
      await addEngineLog("üåê Phase 2 ‚Äì Pr√©visions continentales (fallback)...");
      const cont = await runContinental();
      forecasts.Continental = cont?.forecasts || {};
      state.forecastsContinental = forecasts.Continental;
      state.checkup.forecastsContinental = "OK";
      await addEngineLog("‚úÖ Pr√©visions continentales termin√©es");
      await saveEngineState(state);
    }

    // === PHASE 3 : G√©n√©ration alertes locales/nationales ===
    await addEngineLog("üö® Phase 3 ‚Äì G√©n√©ration alertes locales/nationales...");
    for (const [country, zones] of Object.entries(ALL_ZONES)) {
      for (const z of zones) {
        const lat = z.lat ?? z.latitude;
        const lon = z.lon ?? z.longitude;
        const region = z.region ?? z.name ?? "Inconnu";
        if (!lat || !lon) {
          await addEngineError(`‚ö†Ô∏è Coordonn√©es manquantes pour ${country} - ${region}`);
          continue;
        }
        await generateAlerts(lat, lon, country, region, zone);
      }
    }
    const alerts = await getActiveAlerts();
    state.alertsLocal = alerts;
    state.checkup.aiAlerts = alerts?.length ? "OK" : "NONE";
    await addEngineLog(`‚úÖ ${alerts?.length || 0} alertes locales/nationales g√©n√©r√©es`);
    await saveEngineState(state);

    // === PHASE 4 : Alertes continentales ===
    if (zone === "All") {
      await addEngineLog("üåé Phase 4 ‚Äì G√©n√©ration alertes continentales...");
      const cont = await runContinental();
      state.alertsContinental = cont?.alerts || [];
      state.checkup.alertsContinental = state.alertsContinental.length ? "OK" : "NONE";
      await addEngineLog(`‚úÖ ${state.alertsContinental.length} alertes continentales`);
      await saveEngineState(state);
    }

    // === PHASE 5 : Fusion mondiale des alertes ===
    if (zone === "All") {
      await addEngineLog("üåç Phase 5 ‚Äì Fusion mondiale des alertes...");
      const world = await runWorldAlerts();
      state.alertsWorld = world || [];
      state.checkup.alertsWorld = world?.length ? "OK" : "NONE";
      await addEngineLog(`‚úÖ Fusion mondiale termin√©e (${world?.length || 0} alertes)`);
      await saveEngineState(state);
    }

    // === PHASE 6 : Fusion IA J.E.A.N. ===
    await addEngineLog("ü§ñ Phase 6 ‚Äì Fusion IA J.E.A.N (analyse globale)...");
    try {
      const aiInput = { forecasts, alerts: state.alertsLocal, world: state.alertsWorld };
      const aiResponse = await askOpenAI(
        "Tu es J.E.A.N., syst√®me m√©t√©orologique d‚Äôanalyse et de fusion. Donne une synth√®se fiable et lisible.",
        JSON.stringify(aiInput)
      );
      let fusionResult;
      try {
        fusionResult = JSON.parse(aiResponse);
      } catch {
        fusionResult = { raw: aiResponse };
      }
      state.finalReport = fusionResult;
      await addEngineLog("‚úÖ Fusion IA J.E.A.N termin√©e");
    } catch (err) {
      await addEngineError("‚ö†Ô∏è IA J.E.A.N indisponible : " + err.message);
    }

    // === PHASE 7 : Cross-check Weather.gov (USA) ===
    if (zone === "USA" || zone === "All") {
      await addEngineLog("üá∫üá∏ V√©rification en temps r√©el avec Weather.gov (NWS)...");
      try {
        const nwsCheck = await weatherGovService.crossCheck(forecasts.USA, state.alertsLocal);
        state.checkup.nwsComparison = nwsCheck;
        await addEngineLog(`‚úÖ NWS cross-check termin√© : ${nwsCheck.summary}`);
      } catch (e) {
        await addEngineError("‚ö†Ô∏è Erreur NWS cross-check : " + e.message);
      }
      await saveEngineState(state);
    }

    // === PHASE 8 : Cross-check MeteoAlarm (Europe) ===
    if (zone === "Europe" || zone === "All") {
      await addEngineLog("üá™üá∫ V√©rification en temps r√©el avec MeteoAlarm (EUMETNET)...");
      try {
        const euroCheck = await euroMeteoService.crossCheck(forecasts.Europe, state.alertsLocal);
        state.checkup.euComparison = euroCheck;
        await addEngineLog(`‚úÖ MeteoAlarm cross-check termin√© : ${euroCheck.summary}`);
      } catch (e) {
        await addEngineError("‚ö†Ô∏è Erreur MeteoAlarm cross-check : " + e.message);
      }
      await saveEngineState(state);
    }

    // === PHASE 9 : √âvolution automatique des alertes ===
    await addEngineLog("‚ôªÔ∏è PHASE 9 ‚Äì √âvolution automatique des alertes...");
    try {
      const evo = await runEvolution();
      state.checkup.alertEvolution = `OK (+${evo.created?.length || 0} / ${evo.updated?.length || 0} / ${evo.deleted?.length || 0})`;
      await addEngineLog(`‚úÖ √âvolution termin√©e : ${evo.updated?.length || 0} mises √† jour, ${evo.deleted?.length || 0} supprim√©es`);
    } catch (err) {
      await addEngineError("‚ö†Ô∏è Erreur √©volution alertes : " + err.message);
    }

    // === Finalisation ===
    state.status = "ok";
    state.checkup.engineStatus = "OK";
    state.lastRun = new Date();
    await saveEngineState(state);
    await addEngineLog("‚úÖ RUN GLOBAL termin√© avec succ√®s complet");

    return {
      forecasts,
      alerts,
      world: state.alertsWorld || [],
      finalReport: state.finalReport || {},
    };
  } catch (err) {
    await addEngineError("‚ùå Erreur RUN GLOBAL : " + err.message);
    state.status = "fail";
    state.checkup.engineStatus = "FAIL";
    await saveEngineState(state);
    await addEngineLog("‚ùå RUN GLOBAL √©chec");
    return { success: false, error: err.message };
  }
}
