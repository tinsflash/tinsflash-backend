// PATH: services/runGlobal.js
// RUN GLOBAL ‚Äì Pr√©visions locales/nationales sur zones couvertes

import gfs from "./gfs.js";
import ecmwf from "./ecmwf.js";
import icon from "./icon.js";
import meteomatics from "./meteomatics.js";
import nasaSat from "./nasaSat.js";
import copernicus from "./copernicusService.js";
import trullemans from "./trullemans.js";
import wetterzentrale from "./wetterzentrale.js";
import { askAI } from "./chatService.js";
import { addEngineLog, addEngineError, saveEngineState, getEngineState } from "./engineState.js";
import { processAlerts } from "./alertsService.js";

export async function runGlobal() {
  const state = getEngineState();
  try {
    addEngineLog("üöÄ Lancement du RUN GLOBAL‚Ä¶");

    // === √âtape 1 : r√©cup√©ration des mod√®les
    addEngineLog("üì° R√©cup√©ration donn√©es GFS/ECMWF/ICON/Meteomatics‚Ä¶");
    const gfsData = await gfs({});
    const ecmwfData = await ecmwf({});
    const iconData = await icon({});
    const meteomaticsData = await meteomatics({});

    addEngineLog("‚úÖ Mod√®les principaux r√©cup√©r√©s");

    // === √âtape 2 : satellites et climat
    addEngineLog("üõ∞Ô∏è Int√©gration donn√©es NASA & Copernicus‚Ä¶");
    const nasaData = await nasaSat({});
    const copernicusData = await copernicus("reanalysis-era5-land", {});

    addEngineLog("‚úÖ Sources satellites & climat int√©gr√©es");

    // === √âtape 3 : comparateurs externes
    addEngineLog("üîé V√©rification avec Trullemans & Wetterzentrale‚Ä¶");
    const trullemansData = await trullemans({});
    const wetterzentraleData = await wetterzentrale({});
    addEngineLog("‚úÖ Comparateurs charg√©s");

    // === √âtape 4 : IA pr√©visions
    addEngineLog("ü§ñ Analyse IA des pr√©visions locales/nationales‚Ä¶");
    const prompt = `
Fusionne les donn√©es m√©t√©o ci-dessous pour produire un bulletin :
- GFS: ${JSON.stringify(gfsData)}
- ECMWF: ${JSON.stringify(ecmwfData)}
- ICON: ${JSON.stringify(iconData)}
- Meteomatics: ${JSON.stringify(meteomaticsData)}
- NASA: ${JSON.stringify(nasaData)}
- Copernicus: ${JSON.stringify(copernicusData)}
Benchmarks (ne pas copier) :
- Trullemans: ${JSON.stringify(trullemansData)}
- Wetterzentrale: ${JSON.stringify(wetterzentraleData)}
`;
    const analysis = await askAI(prompt);

    addEngineLog("‚úÖ Analyse IA des pr√©visions termin√©e");

    // === √âtape 5 : Sauvegarde dans state
    state.globalForecast = {
      gfsData, ecmwfData, iconData, meteomaticsData,
      nasaData, copernicusData, trullemansData, wetterzentraleData,
      analysis,
    };
    saveEngineState(state);
    addEngineLog("üíæ Pr√©visions globales sauvegard√©es dans engineState");

    // === √âtape 6 : alertes automatiques
    addEngineLog("üö® Traitement des alertes associ√©es aux pr√©visions‚Ä¶");
    const alertStats = await processAlerts();
    addEngineLog("‚úÖ Alertes trait√©es");

    addEngineLog("üèÅ RUN GLOBAL termin√© avec succ√®s");
    return { forecast: analysis, alertStats };
  } catch (err) {
    addEngineError(err.message || "Erreur inconnue RUN GLOBAL");
    addEngineLog("‚ùå Erreur dans RUN GLOBAL");
    return { error: err.message };
  }
}
