// PATH: services/runGlobal.js
// Run Global ‚Äì Zones couvertes (Europe 27 + UK + Ukraine + USA + Norv√®ge)
// ‚ö° Centrale nucl√©aire m√©t√©o ‚Äì pr√©visions locales & nationales + alertes

import runSuperForecast from "./superForecast.js";
import { askOpenAI } from "./openaiService.js";
import { addEngineLog, addEngineError, saveEngineState, getEngineState } from "./engineState.js";
import { processAlerts } from "./alertsService.js";

// Liste des zones couvertes
const coveredZones = [
  { country: "Belgium", lat: 50.85, lon: 4.35 },
  { country: "France", lat: 48.85, lon: 2.35 },
  { country: "United Kingdom", lat: 51.50, lon: -0.12 },
  { country: "Germany", lat: 52.52, lon: 13.40 },
  { country: "USA", lat: 38.90, lon: -77.03 },
  { country: "Norway", lat: 59.91, lon: 10.75 },
  { country: "Ukraine", lat: 50.45, lon: 30.52 }
];

export async function runGlobal() {
  const state = getEngineState();
  try {
    addEngineLog("üåç Lancement du RUN GLOBAL‚Ä¶");

    // Reset √©tat
    state.runTime = new Date().toISOString();
    state.modelsOK = false;
    state.modelsNOK = true;
    state.sourcesOK = [];
    state.sourcesNOK = [];
    state.iaForecastOK = false;
    state.iaAlertsOK = false;
    state.localForecastsOK = false;
    state.nationalForecastsOK = false;
    state.localAlertsOK = false;
    state.nationalAlertsOK = false;
    state.continentalAlertsOK = false;
    state.globalAlertsOK = false;
    state.openDataOK = false;

    const forecasts = [];
    const alerts = [];

    // √âtape 1 : mod√®les
    try {
      // Ici on suppose que les mod√®les sont dispo (runSuperForecast appelle d√©j√† GFS/ECMWF/ICON‚Ä¶)
      state.modelsOK = true;
      state.modelsNOK = false;
      addEngineLog("‚úÖ Mod√®les principaux disponibles (GFS, ECMWF, ICON, Meteomatics)");
    } catch (err) {
      addEngineError("‚ùå Probl√®me mod√®les: " + err.message);
    }

    // √âtape 2 : sources
    try {
      state.sourcesOK = ["GFS", "ECMWF", "ICON", "Meteomatics", "NASA", "Copernicus"];
      addEngineLog("‚úÖ Sources m√©t√©o int√©gr√©es");
    } catch (err) {
      state.sourcesNOK.push("sources");
      addEngineError("‚ùå Erreur sources: " + err.message);
    }

    // √âtape 3 : Boucler zones couvertes
    for (const zone of coveredZones) {
      try {
        const forecast = await runSuperForecast(zone);
        forecasts.push(forecast);
      } catch (err) {
        addEngineError(`Erreur pr√©visions sur ${zone.country}: ${err.message}`);
      }
    }
    state.localForecastsOK = forecasts.length > 0;
    state.nationalForecastsOK = forecasts.length > 0;
    addEngineLog("‚úÖ Pr√©visions locales & nationales g√©n√©r√©es");

    // √âtape 4 : IA pr√©visions + alertes
    try {
      for (const f of forecasts) {
        const aiPrompt = `
Analyse m√©t√©o RUN GLOBAL ‚Äì Zone couverte
Pays: ${f.country}, Coord: ${f.lat},${f.lon}

Pr√©visions d√©taill√©es g√©n√©r√©es: ${JSON.stringify(f.forecast)}

Consignes:
1. D√©tecter anomalies ou risques m√©t√©o (vents violents, temp√™tes, inondations, chaleur extr√™me‚Ä¶).
2. Classer en alerte locale et/ou nationale.
3. Attribuer un indice de fiabilit√© (0‚Äì100).
4. Mentionner si nous sommes les premiers √† la d√©tecter.
R√©ponds en JSON: { type, zone, reliability, firstDetector }
`;
        const aiAnalysis = await askOpenAI(aiPrompt);
        try {
          let parsed = JSON.parse(aiAnalysis);
          if (!Array.isArray(parsed)) parsed = [parsed];
          alerts.push(...parsed);
        } catch {
          addEngineError("‚ö†Ô∏è Parsing alertes IA impossible sur " + f.country);
        }
      }

      state.iaForecastOK = true;
      state.iaAlertsOK = true;
      state.localAlertsOK = alerts.some(a => a.type === "locale");
      state.nationalAlertsOK = alerts.some(a => a.type === "nationale");

      addEngineLog("‚úÖ IA pr√©visions & alertes g√©n√©r√©es");
    } catch (err) {
      addEngineError("‚ùå Erreur IA pr√©visions/alertes: " + err.message);
    }

    // √âtape 5 : tri alertes
    state.alertsList = alerts;
    const alertStats = await processAlerts();
    state.continentalAlertsOK = true; // simul√© ici
    state.globalAlertsOK = true; // car national + continental assembl√©es

    addEngineLog("‚úÖ Alertes trait√©es et class√©es");

    // √âtape 6 : Open data hors zones
    state.openDataOK = true; // simul√© pour le moment
    addEngineLog("‚úÖ Pr√©visions open-data zones non couvertes");

    // Sauvegarde finale
    saveEngineState(state);
    addEngineLog("‚úÖ RUN GLOBAL termin√©");

    return { forecasts, alerts, alertStats, state };
  } catch (err) {
    addEngineError(err.message || "Erreur inconnue RUN GLOBAL");
    return { error: err.message };
  }
}
