// services/runGlobal.js
// ‚ö° Centrale nucl√©aire m√©t√©o ‚Äì Moteur atomique orchestral

import { runGlobalEurope } from "./runGlobalEurope.js";
import { runGlobalUSA } from "./runGlobalUSA.js";
import { runContinental } from "./runContinental.js";
import { runWorldAlerts } from "./runWorldAlerts.js";

import { generateAlerts, getActiveAlerts } from "./alertsService.js";
import { askOpenAI } from "./openaiService.js";
import { addEngineLog, addEngineError, saveEngineState, getEngineState } from "./engineState.js";

// Zones disponibles
import { EUROPE_ZONES } from "./runGlobalEurope.js";
import { USA_ZONES } from "./runGlobalUSA.js";

export const ALL_ZONES = {
  ...EUROPE_ZONES,
  ...USA_ZONES,
};

// === Orchestrateur principal ===
export async function runGlobal(zone = "All") {
  const state = await getEngineState();
  try {
    addEngineLog(`üåç Lancement du RUN GLOBAL (${zone})‚Ä¶`);
    state.runTime = new Date().toISOString();

    // S√©curisation checkup
    state.checkup = state.checkup || {};
    state.checkup.models = "PENDING";
    state.checkup.localForecasts = "PENDING";
    state.checkup.nationalForecasts = "PENDING";
    state.checkup.forecastsContinental = "PENDING";
    state.checkup.aiAlerts = "PENDING";
    state.checkup.alertsContinental = "PENDING";
    state.checkup.alertsWorld = "PENDING";
    state.checkup.engineStatus = "RUNNING";

    await saveEngineState(state);

    // =============================
    // üîπ PHASE 1 : PR√âVISIONS ZONES COUVERTES
    // =============================
    addEngineLog("üì° Phase 1 ‚Äì Pr√©visions zones couvertes (Europe/USA)...");
    let forecasts = {};

    if (zone === "Europe") {
      forecasts.Europe = await runGlobalEurope();
    } else if (zone === "USA") {
      forecasts.USA = await runGlobalUSA();
    } else if (zone === "All") {
      forecasts.Europe = await runGlobalEurope();
      forecasts.USA = await runGlobalUSA();
    }

    state.checkup.models = "OK";
    state.checkup.localForecasts = "OK";
    state.checkup.nationalForecasts = "OK";
    await saveEngineState(state);

    // =============================
    // üîπ PHASE 2 : PR√âVISIONS CONTINENTALES (fallback)
    // =============================
    if (zone === "All") {
      addEngineLog("üåê Phase 2 ‚Äì Pr√©visions Continentales (fallback)...");
      const cont = await runContinental();
      forecasts.Continental = cont?.forecasts || {};
      state.forecastsContinental = forecasts.Continental;
      state.checkup.forecastsContinental = "OK";
      await saveEngineState(state);
    }

    // =============================
    // üîπ PHASE 3 : ALERTES LOCALES/NATIONALES
    // =============================
    addEngineLog("üö® Phase 3 ‚Äì G√©n√©ration alertes locales/nationales (zones couvertes)...");
    for (const [country, zones] of Object.entries(ALL_ZONES)) {
      for (const z of zones) {
        // ‚úÖ S√©curisation mapping coordonn√©es
        const lat = z.lat ?? z.latitude;
        const lon = z.lon ?? z.longitude;
        const region = z.region ?? z.name ?? null;

        if (!lat || !lon) {
          await addEngineError(`‚ö†Ô∏è Coordonn√©es manquantes pour ${country} - ${region || "???"}`);
          continue;
        }

        await generateAlerts(lat, lon, country, region, zone);
      }
    }

    const alerts = await getActiveAlerts();
    state.alertsLocal = alerts;
    state.checkup.aiAlerts = alerts?.length > 0 ? "OK" : "FAIL";
    await saveEngineState(state);

    // =============================
    // üîπ PHASE 4 : ALERTES CONTINENTALES
    // =============================
    if (zone === "All") {
      addEngineLog("üö® Phase 4 ‚Äì Alertes Continentales (fallback)...");
      const contAlerts = await runContinental();
      state.alertsContinental = contAlerts?.alerts || [];
      state.checkup.alertsContinental =
        state.alertsContinental.length > 0 ? "OK" : "FAIL";
      await saveEngineState(state);
    }

    // =============================
    // üîπ PHASE 5 : ALERTES MONDIALES
    // =============================
    if (zone === "All") {
      addEngineLog("üåç Phase 5 ‚Äì Fusion mondiale des alertes...");
      const world = await runWorldAlerts();
      state.alertsWorld = world || [];
      state.checkup.alertsWorld = world ? "OK" : "FAIL";
      await saveEngineState(state);
    }

    // =============================
    // üîπ PHASE 6 : IA CHEF D‚ÄôORCHESTRE (FusionNet Global)
    // =============================
    addEngineLog("ü§ñ Phase 6 ‚Äì IA Chef d‚Äôorchestre (FusionNet Global)‚Ä¶");

    const aiInput = { forecasts, alerts: state.alertsLocal, world: state.alertsWorld };
    let aiFusion;
    try {
      aiFusion = await askOpenAI(
        "Tu es l‚ÄôIA J.E.A.N., chef d‚Äôorchestre m√©t√©o nucl√©aire. Analyse, fusionne et renvoie une synth√®se fiable.",
        JSON.stringify(aiInput)
      );
    } catch (e) {
      addEngineError("‚ö†Ô∏è IA Chef d‚Äôorchestre non disponible : " + e.message);
      aiFusion = "{}";
    }

    let fusionNetGlobal;
    try {
      fusionNetGlobal = JSON.parse(aiFusion);
    } catch {
      fusionNetGlobal = { raw: aiFusion };
    }

    state.finalReport = fusionNetGlobal;
    state.checkup.engineStatus = "OK";
    await saveEngineState(state);

    addEngineLog("‚úÖ RUN GLOBAL termin√© avec succ√®s.");
    return {
      forecasts,
      alerts,
      fusionNet: fusionNetGlobal,
      finalReport: fusionNetGlobal,
    };
  } catch (err) {
    await addEngineError("‚ùå Erreur RUN GLOBAL : " + (err.message || err));

    const failedState = await getEngineState();
    failedState.checkup = failedState.checkup || {};
    failedState.checkup.engineStatus = "FAIL";
    await saveEngineState(failedState);

    addEngineLog(`‚ùå RUN GLOBAL √©chec (${zone})`);
    return { error: err.message };
  }
}
