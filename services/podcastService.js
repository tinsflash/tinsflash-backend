// -------------------------
// üåç podcastService.js
// G√©n√©ration de pr√©visions audio par IA
// -------------------------

import fetch from "node-fetch";
import fs from "fs";
import path from "path";

export async function generatePodcast(type = "free") {
  let prompt = "";

  switch (type) {
    case "free":
      prompt = "Pr√©vision m√©t√©o simple et concise en fran√ßais.";
      break;
    case "premium":
      prompt = "Pr√©vision m√©t√©o d√©taill√©e avec temp√©ratures, pluie, vent.";
      break;
    case "pro":
      prompt = "Pr√©vision m√©t√©o locale adapt√©e aux agriculteurs et aux pros.";
      break;
    case "proplus":
      prompt = "Pr√©vision m√©t√©o scientifique ultra pr√©cise avec tendances.";
      break;
    default:
      prompt = "Pr√©vision m√©t√©o g√©n√©rique.";
  }

  try {
    // G√©n√©ration du texte m√©t√©o avec GPT
    const reply = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
      }),
    });

    const data = await reply.json();
    const forecastText = data.choices?.[0]?.message?.content || "Pr√©vision indisponible";

    // G√©n√©ration audio (TTS)
    const tts = await fetch("https://api.openai.com/v1/audio/speech", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini-tts",
        voice: "alloy",
        input: forecastText,
      }),
    });

    const buffer = Buffer.from(await tts.arrayBuffer());
    const filePath = path.join(process.cwd(), `public/podcast-${type}.mp3`);
    fs.writeFileSync(filePath, buffer);

    return {
      type,
      text: forecastText,
      audioUrl: `/podcast-${type}.mp3`,
    };
  } catch (err) {
    throw new Error("Erreur g√©n√©ration podcast : " + err.message);
  }
}
