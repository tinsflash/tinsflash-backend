// services/alertsService.js
import Alert from "../models/Alert.js";
import { addLog } from "./logsService.js";
import axios from "axios";

/**
 * V√©rifie si une alerte existe d√©j√† en base ou chez NOAA/Copernicus
 * Retourne un statut clair : Premier d√©tecteur / D√©j√† signal√© / Doublon confirm√©
 */
async function checkDuplicate(alert) {
  try {
    // V√©rification interne Mongo
    const existing = await Alert.findOne({
      title: alert.title,
      region: alert.region,
      level: alert.level,
    });
    if (existing) return "‚ùå Doublon confirm√© (interne)";

    // V√©rification externe NOAA (simplifi√© ‚Üí √† am√©liorer avec API cl√© si dispo)
    const noaaCheck = false;
    // V√©rification Copernicus (idem, placeholder)
    const copernicusCheck = false;

    if (noaaCheck || copernicusCheck) {
      return "‚ö†Ô∏è D√©j√† signal√© ailleurs";
    }

    return "‚úÖ Premier d√©tecteur";
  } catch (err) {
    console.error("‚ùå Erreur checkDuplicate:", err.message);
    return "‚ö†Ô∏è V√©rification externe impossible";
  }
}

/**
 * Cr√©e une nouvelle alerte
 * Zones couvertes : locale/nationale (Europe √©largie + USA par √âtat + synth√®se)
 * Zones non couvertes : alerte par continent
 */
export async function createAlert(data) {
  try {
    const { title, description, level, probability, region } = data;

    const newAlert = new Alert({
      title,
      description,
      level,
      probability,
      region,
      validated: probability >= 90, // auto valid√©e si certitude ‚â•90%
    });

    const status = await checkDuplicate(newAlert);
    await addLog(`‚ö†Ô∏è Nouvelle alerte ${region} (${level}, ${probability}%) ‚Üí ${status}`);

    await newAlert.save();
    return { ...newAlert.toObject(), status };
  } catch (err) {
    console.error("‚ùå Erreur createAlert:", err.message);
    throw err;
  }
}

/**
 * R√©cup√®re toutes les alertes
 * - Derni√®res d‚Äôabord
 * - Zones couvertes = pr√©cises
 * - Zones non couvertes = globales
 */
export async function getAlerts() {
  try {
    const alerts = await Alert.find().sort({ createdAt: -1 });
    return alerts;
  } catch (err) {
    console.error("‚ùå Erreur getAlerts:", err.message);
    throw err;
  }
}

/**
 * Valide une alerte manuellement (70‚Äì89%)
 */
export async function validateAlert(id) {
  try {
    const alert = await Alert.findByIdAndUpdate(
      id,
      { validated: true },
      { new: true }
    );
    await addLog(`‚úÖ Alerte valid√©e manuellement: ${alert.title} (${alert.region})`);
    return alert;
  } catch (err) {
    console.error("‚ùå Erreur validateAlert:", err.message);
    throw err;
  }
}

/**
 * Supprime une alerte obsol√®te
 */
export async function deleteAlert(id) {
  try {
    const alert = await Alert.findByIdAndDelete(id);
    await addLog(`üóëÔ∏è Alerte supprim√©e: ${alert?.title || id}`);
    return alert;
  } catch (err) {
    console.error("‚ùå Erreur deleteAlert:", err.message);
    throw err;
  }
}

export default {
  createAlert,
  getAlerts,
  validateAlert,
  deleteAlert,
};
