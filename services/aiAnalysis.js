// PATH: services/aiAnalysis.js
// ü§ñ √âtape 2 ‚Äì IA J.E.A.N : lit partialReport + geo/local factors et produit finalReport

import { getEngineState, saveEngineState } from "./engineState.js";
import * as adminLogs from "./adminLogs.js";
import { askOpenAI } from "./openaiService.js";
import { applyGeoFactors } from "./geoFactors.js";          // ‚úÖ Import nomm√©
import { adjustWithLocalFactors } from "./localFactors.js"; // ‚úÖ Import nomm√©

export async function runAIAnalysis() {
  const state = await getEngineState();
  if (!state?.partialReport) {
    await adminLogs.addError("‚ùå IA: partialReport introuvable. Lance d'abord l‚Äôextraction.");
    return { success: false, error: "partialReport introuvable" };
  }

  await adminLogs.addLog("üß† Lancement Analyse IA J.E.A.N (relief/altitude int√©gr√©s)...");

  // üåç Int√©gration terrain avant analyse IA
  if (state.alertsLocal && state.alertsLocal.length > 0) {
    for (const a of state.alertsLocal) {
      if (a.lat && a.lon) {
        try {
          // ‚úÖ Ajustement topographique et microclimatique
          a.forecast = await applyGeoFactors(a.forecast || {}, a.lat, a.lon);
          a.forecast = adjustWithLocalFactors(a.forecast, a.region || "GENERIC");
        } catch (err) {
          await adminLogs.addError(`‚ö†Ô∏è Facteurs terrain √©chou√©s sur ${a.region || "inconnu"}: ${err.message}`);
        }
      }
    }
  }

  // üß© Construction du prompt IA
  const input = {
    partialReport: state.partialReport,
    alertsLocalSample: (state.alertsLocal || []).slice(0, 200),
    alertsContinentalSample: (state.alertsContinental || []).slice(0, 200),
    worldSample: (state.alertsWorld || []).slice(0, 200),
    meta: { note: "Utiliser relief, altitude, exposition, oc√©ans, continent, anomalies saisonni√®res." }
  };

  const system = `
Tu es J.E.A.N., m√©t√©orologue IA de TINSFLASH.
R√àGLES :
- Analyse exclusivement les EXTRACTIONS R√âELLES (aucune invention).
- Int√®gre imp√©rativement : relief, altitude, exposition, oc√©ans, continentalit√©, anomalies saisonni√®res.
- Fournis par PAYS COUVERT : synth√®se, risques majeurs, intensit√©, confiance (0‚Äì100), recommandations pratiques.
- D√©duis et structure aussi les alertes continentales correspondantes.
- R√©ponds UNIQUEMENT en JSON VALIDE.
`;

  const user = JSON.stringify(input);

  try {
    const ai = await askOpenAI(system, user); // GPT-5 J.E.A.N.
    let finalReport;
    try {
      finalReport = JSON.parse(ai);
    } catch {
      finalReport = { raw: ai, note: "‚ö†Ô∏è JSON non pars√© (fourni brut par le mod√®le)" };
    }

    // ‚úÖ Sauvegarde moteur
    state.finalReport = finalReport;
    state.status = "ok";
    state.checkup = state.checkup || {};
    state.checkup.engineStatus = "OK-ANALYZED";
    await saveEngineState(state);

    await adminLogs.addLog("‚úÖ IA J.E.A.N termin√©e. Rapport final disponible.");
    return { success: true, finalReport };
  } catch (e) {
    await adminLogs.addError("‚ö†Ô∏è IA J.E.A.N erreur: " + e.message);
    return { success: false, error: e.message };
  }
}

export default { runAIAnalysis };
