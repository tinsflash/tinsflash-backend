// ==========================================================
// üß† IA ANALYSIS ‚Äì TINSFLASH PRO+++ (Everest Protocol v3.9)
// ==========================================================
// Fusion intelligente, pond√©ration dynamique et calcul d‚Äôindice
// de fiabilit√© par IA J.E.A.N.
// ==========================================================

import axios from "axios";
import { addEngineLog, addEngineError } from "./engineState.js";
import { fetchStationData } from "./stationsService.js"; // ‚úÖ correction du nom de fichier
import { applyGeoFactors } from "./geoFactors.js";
import { applyLocalFactors } from "./localFactors.js";

// ==========================================================
// ‚öôÔ∏è Fonction principale ‚Äì Analyse IA J.E.A.N.
// ==========================================================
export async function runAIAnalysis(results = []) {
  try {
    console.log("\nüß† [IA.J.E.A.N.] D√©marrage de l‚Äôanalyse compl√®te‚Ä¶");
    await addEngineLog("üß† Analyse IA.J.E.A.N. ‚Äì d√©marrage", "info", "aiAnalysis");

    const enhanced = [];
    let globalReliability = 0;
    let totalZones = 0;

    for (const r of results) {
      const { lat, lon, country, temperature, precipitation, wind } = r;
      totalZones++;

      // ==========================================================
      // 1Ô∏è‚É£ Lecture stations m√©t√©o locales
      // ==========================================================
      const stations = await fetchStationData(lat, lon, country);
      const stationData = stations?.data || [];
      const stationCount = Array.isArray(stationData) ? stationData.length : 0;

      // Pond√©ration station ‚Üí correction IA
      const stationFactor = Math.min(1, 0.7 + stationCount * 0.03);

      // ==========================================================
      // 2Ô∏è‚É£ Application des facteurs environnementaux
      // ==========================================================
      let adjusted = { temperature, precipitation, wind };
      adjusted = await applyGeoFactors(adjusted, lat, lon, country);
      adjusted = await applyLocalFactors(adjusted, lat, lon, country);

      // ==========================================================
      // 3Ô∏è‚É£ Calcul du score local et du taux de confiance IA
      // ==========================================================
      const localScore =
        (1 -
          Math.abs(adjusted.temperature - temperature) / 50 +
          Math.abs(adjusted.wind - wind) / 100) *
        stationFactor;

      const reliability = Math.max(0, Math.min(1, localScore));
      globalReliability += reliability;

      const aiResult = {
        ...r,
        stationCount,
        adjusted,
        reliability,
        aiComment:
          reliability > 0.9
            ? "Pr√©vision hautement fiable"
            : reliability > 0.7
            ? "Pr√©vision √† surveiller"
            : "Pr√©vision incertaine",
      };

      enhanced.push(aiResult);

      console.log(
        `üß© Zone ${country} : fiabilit√© ${(reliability * 100).toFixed(
          1
        )}% | ${aiResult.aiComment}`
      );

      await addEngineLog(
        `üß† ${country} ‚Äì ${Math.round(reliability * 100)} % (${stationCount} stations)`,
        reliability > 0.9 ? "success" : reliability > 0.7 ? "warning" : "info",
        "aiAnalysis"
      );
    }

    // ==========================================================
    // 4Ô∏è‚É£ Synth√®se globale IA
    // ==========================================================
    const indiceGlobal = +(globalReliability / (totalZones || 1)).toFixed(3);
    const synthese = {
      indiceGlobal: +(indiceGlobal * 100).toFixed(1),
      zones: enhanced.length,
      commentaire:
        indiceGlobal >= 0.9
          ? "Syst√®me parfaitement stable"
          : indiceGlobal >= 0.7
          ? "Syst√®me en l√©g√®re instabilit√© ‚Äì V√©rification recommand√©e"
          : "Syst√®me instable ‚Äì R√©√©valuation requise",
    };

    console.log(
      `\n‚úÖ [IA.J.E.A.N.] Analyse termin√©e ‚Äì Indice global ${synthese.indiceGlobal}% (${synthese.commentaire})`
    );
    await addEngineLog(
      `‚úÖ IA.J.E.A.N. termin√©e ‚Äì Indice global ${synthese.indiceGlobal}%`,
      "success",
      "aiAnalysis"
    );

    return { synthese, results: enhanced };
  } catch (e) {
    console.error("‚ùå Erreur IA.J.E.A.N. :", e.message);
    await addEngineError("Erreur IA.J.E.A.N. : " + e.message, "aiAnalysis");
    return { error: e.message, synthese: null, results: [] };
  }
}

export default { runAIAnalysis };
