// PATH: services/runGlobalAI.js
// üß† TINSFLASH ‚Äì RUN GLOBAL (√âTAPE 2: ANALYSE IA J.E.A.N.)
// Phase d‚Äôanalyse et d‚Äôinterpr√©tation IA sur les donn√©es r√©elles d√©j√† extraites
// ‚û§ Aucune nouvelle requ√™te r√©seau : lecture directe du moteur (engineState.partialReport)

import { getEngineState, saveEngineState } from "./engineState.js";
import * as adminLogs from "./adminLogs.js";
import { applyGeoFactors } from "./geoFactors.js";
import adjustWithLocalFactors from "./localFactors.js";
import { askOpenAI } from "./openaiService.js";
import forecastVision from "./forecastVision.js";
import { getActiveAlerts } from "./alertsService.js";
import climateBias from "./climateBias.js"; // Optionnel si disponible
import { runContinental } from "./runContinental.js";
import { runWorldAlerts } from "./runWorldAlerts.js";

/* -----------------------------------------------------
   üß© 1Ô∏è‚É£ Pr√©paration des donn√©es
------------------------------------------------------*/
async function prepareData() {
  const state = await getEngineState();
  if (!state.partialReport) {
    throw new Error("Aucune extraction disponible (partialReport manquant). Lancer runGlobal() d‚Äôabord.");
  }

  const alertsLocal = state.alertsLocal || [];
  const continental = state.alertsContinental || [];
  const world = state.alertsWorld || [];
  const report = state.partialReport;

  return { alertsLocal, continental, world, report, state };
}

/* -----------------------------------------------------
   üß© 2Ô∏è‚É£ Analyse g√©ographique (relief / altitude / climat)
------------------------------------------------------*/
async function enrichWithGeoFactors(alerts) {
  const enriched = [];
  for (const a of alerts) {
    try {
      const base = {
        temperature: a.data?.temperature || null,
        precipitation: a.data?.precipitation || null,
        wind: a.data?.wind || null,
      };
      let adjusted = await applyGeoFactors(base, a.lat, a.lon, a.country);
      adjusted = await adjustWithLocalFactors(adjusted, a.country, a.lat, a.lon);
      const anomaly = forecastVision.detectSeasonalAnomaly(adjusted);
      const climate = climateBias ? climateBias.getRegionalBias(a.country, a.region) : null;
      enriched.push({ ...a, adjusted, anomaly, climate });
    } catch (err) {
      await adminLogs.addError(`üåç Facteurs g√©o √©chou√©s (${a.country} - ${a.region}): ${err.message}`);
    }
  }
  return enriched;
}

/* -----------------------------------------------------
   üß© 3Ô∏è‚É£ IA J.E.A.N. ‚Äì Fusion multi-mod√®les et raisonnement
------------------------------------------------------*/
async function analyzeWithAI(allData) {
  const results = [];
  for (const zone of allData) {
    const prompt = `
Tu es J.E.A.N., le moteur d‚Äôanalyse m√©t√©orologique nucl√©aire de TINSFLASH.
Analyse la situation suivante avec une pr√©cision scientifique :

Pays: ${zone.country}
R√©gion: ${zone.region}
Relief et altitude ajust√©s: ${JSON.stringify(zone.adjusted)}
Anomalies saisonni√®res: ${JSON.stringify(zone.anomaly)}
Biais climatiques r√©gionaux: ${JSON.stringify(zone.climate)}
Latitude: ${zone.lat}, Longitude: ${zone.lon}

Consignes :
1. √âvalue la situation m√©t√©orologique compl√®te (temp√©rature, pr√©cipitations, vent, neige, humidit√©)
2. D√©duis les risques (pluie extr√™me, vent violent, neige, verglas, s√©cheresse, orage, canicule)
3. Pond√®re la confiance (0‚Äì100) selon coh√©rence multi-mod√®les et stabilit√© du relief
4. Fournis les cons√©quences et recommandations pratiques
5. R√©ponds STRICTEMENT en JSON :
{
  "type": "string",
  "zone": "string",
  "confidence": 0‚Äì100,
  "intensity": "string",
  "duration": "string",
  "consequences": "string",
  "recommendations": "string"
}`;

    try {
      const ai = await askOpenAI("Analyse IA J.E.A.N. ‚Äì moteur TINSFLASH", prompt);
      const parsed = JSON.parse(ai);
      results.push({ ...zone, ai: parsed });
      await adminLogs.addLog(`üß† IA J.E.A.N analys√© : ${zone.country} ‚Äì ${zone.region}`);
    } catch (err) {
      await adminLogs.addError(`‚ùå IA J.E.A.N √©chec sur ${zone.country} ‚Äì ${zone.region}: ${err.message}`);
    }
  }
  return results;
}

/* -----------------------------------------------------
   üß© 4Ô∏è‚É£ Synth√®se & rapport final
------------------------------------------------------*/
async function buildFinalReport(enrichedAI) {
  const summary = {
    generatedAt: new Date().toISOString(),
    analyzedZones: enrichedAI.length,
    avgConfidence:
      enrichedAI.reduce((a, z) => a + (z.ai?.confidence || 0), 0) /
      Math.max(1, enrichedAI.length),
    highConfidence: enrichedAI.filter((z) => z.ai?.confidence >= 80).length,
    lowConfidence: enrichedAI.filter((z) => z.ai?.confidence < 50).length,
  };

  const details = enrichedAI.map((z) => ({
    country: z.country,
    region: z.region,
    type: z.ai?.type,
    confidence: z.ai?.confidence,
    intensity: z.ai?.intensity,
    duration: z.ai?.duration,
    consequences: z.ai?.consequences,
    recommendations: z.ai?.recommendations,
  }));

  return { summary, details };
}

/* -----------------------------------------------------
   üöÄ 5Ô∏è‚É£ RUN GLOBAL ‚Äì PHASE 2 (IA J.E.A.N.)
------------------------------------------------------*/
export async function runGlobalAI() {
  await adminLogs.startNewCycle("IA");
  await adminLogs.addLog("üß† Lancement RUN GLOBAL IA J.E.A.N...");

  try {
    const { alertsLocal, continental, world, report, state } = await prepareData();
    const allAlerts = [...alertsLocal, ...continental, ...world];
    await adminLogs.addLog(`üìä ${allAlerts.length} zones √† traiter par J.E.A.N.`);

    const geoEnriched = await enrichWithGeoFactors(allAlerts);
    await adminLogs.addLog("üåç Facteurs g√©ographiques appliqu√©s.");

    const aiResults = await analyzeWithAI(geoEnriched);
    await adminLogs.addLog("ü§ñ IA J.E.A.N a termin√© son analyse.");

    const finalReport = await buildFinalReport(aiResults);

    state.status = "analyzed";
    state.lastRunAI = new Date();
    state.checkup = state.checkup || {};
    state.checkup.engineStatus = "OK-AI";
    state.finalReport = finalReport;
    state.aiAnalysis = aiResults;

    await saveEngineState(state);
    await adminLogs.addLog("‚úÖ √âtape 2 termin√©e ‚Äì Rapport final IA g√©n√©r√© avec succ√®s.");
    return { success: true, finalReport };
  } catch (err) {
    await adminLogs.addError("‚ùå RUN GLOBAL IA J.E.A.N √©chec: " + err.message);
    const s = await getEngineState();
    s.status = "fail";
    s.checkup = s.checkup || {};
    s.checkup.engineStatus = "FAIL-AI";
    await saveEngineState(s);
    return { success: false, error: err.message };
  }
}
