// ====================================================================
// FICHIER : /vision/storeCapture.js
// ====================================================================
// üíæ VisionIA ‚Äì Sauvegarde des captures dans MongoDB
// üîß Version : TINSFLASH PRO+++ v6.3 (NOAA / GOES compatible)
// ====================================================================

import mongoose from "mongoose";
import { addVisionLog } from "./logVisionCapture.js";

// ====================================================================
// üß± Sch√©ma Mongoose VisionCapture
// ====================================================================
const VisionSchema = new mongoose.Schema({
  source: { type: String, required: true },
  file: { type: String },
  date: { type: String },
  timestamp: { type: Date, default: Date.now },
});

const VisionCapture =
  mongoose.models.VisionCapture || mongoose.model("VisionCapture", VisionSchema);

// ====================================================================
// üíæ Sauvegarde des captures dans MongoDB
// ====================================================================
export async function storeCapture(captures = []) {
  const stored = [];

  if (!Array.isArray(captures) || captures.length === 0) {
    await addVisionLog("‚ö†Ô∏è Aucune capture √† stocker dans MongoDB", "warn");
    return stored;
  }

  for (const c of captures) {
    try {
      await VisionCapture.create(c);
      stored.push(c);
      await addVisionLog(`üíæ Capture enregistr√©e : ${c.source}`, "info");
    } catch (err) {
      console.error(`‚ö†Ô∏è Erreur sauvegarde capture ${c.source} : ${err.message}`);
      await addVisionLog(
        `‚ö†Ô∏è Erreur MongoDB lors de la sauvegarde de ${c.source} : ${err.message}`,
        "error"
      );
    }
  }

  await addVisionLog(`‚úÖ ${stored.length}/${captures.length} captures stock√©es dans MongoDB`, "success");
  return stored;
}
