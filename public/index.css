// public/js/index.js

async function getUserPosition() {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject("La géolocalisation n'est pas supportée.");
    } else {
      navigator.geolocation.getCurrentPosition(
        pos => resolve({ lat: pos.coords.latitude, lon: pos.coords.longitude }),
        err => reject("Impossible d'obtenir la géolocalisation: " + err.message)
      );
    }
  });
}

// Prévisions locales
async function loadLocalForecast(lat, lon) {
  const res = await fetch(`/api/localforecast/${lat}/${lon}`);
  const data = await res.json();
  const div = document.getElementById("local-content");

  if (data.error) {
    div.innerHTML = "❌ Erreur prévisions locales";
    return;
  }

  div.innerHTML = `
    <h3>${data.zone || "Votre position"}</h3>
    <i class="wi wi-day-sunny animated"></i>
    <p>${data.temp_min}°C – ${data.temp_max}°C</p>
    <p>🌧️ Pluie: ${data.rain_prob || 0}%</p>
    <p>💨 Vent: ${data.wind || 0} km/h</p>
    <p>🔒 Fiabilité: ${data.confidence || 70}%</p>
  `;
}

// Prévisions nationales
async function loadNationalForecast(zone = "Belgium") {
  const res = await fetch(`/api/forecast/${zone}`);
  const data = await res.json();
  const div = document.getElementById("national-content");

  if (data.error) {
    div.innerHTML = "❌ Erreur prévisions nationales";
    return;
  }

  div.innerHTML = `
    <h3>${zone}</h3>
    <i class="wi wi-cloudy animated"></i>
    <p>${data.temp_min}°C – ${data.temp_max}°C</p>
    <p>${data.summary || "Prévisions nationales en cours..."}</p>
  `;
}

// Prévisions 7 jours
async function loadForecastDays(zone = "Belgium") {
  const res = await fetch(`/api/forecast/${zone}`);
  const data = await res.json();
  const container = document.getElementById("days-container");

  if (!data || !data.days) {
    container.innerHTML = "❌ Erreur 7 jours";
    return;
  }

  container.innerHTML = data.days
    .map(day => `
      <div class="forecast-item">
        <h4>${day.date || "?"}</h4>
        <i class="wi wi-day-cloudy animated"></i>
        <p>${day.temp_min}°C – ${day.temp_max}°C</p>
      </div>
    `)
    .join("");
}

// Bulletin météo (auto, pas IA)
async function loadBulletin(zone = "Belgium") {
  const res = await fetch(`/api/bulletin/${zone}`);
  const data = await res.json();
  document.getElementById("forecast-text").innerText =
    data.text || "❌ Erreur génération bulletin";
}

// Radar
async function loadRadar(zone = "Belgium") {
  const res = await fetch(`/api/radar/${zone}`);
  const data = await res.json();
  const div = document.getElementById("radar-map");

  if (data.error) {
    div.innerHTML = "❌ Erreur radar";
    return;
  }

  const map = L.map("radar-map").setView([50.5, 4.7], 6);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "Radar data",
  }).addTo(map);
}

// Alertes
async function loadAlerts(zone = "Belgium") {
  const res = await fetch(`/api/alerts/${zone}`);
  const data = await res.json();
  const div = document.getElementById("alerts-content");

  if (!data.alerts || data.alerts.length === 0) {
    div.innerHTML = "✅ Aucune alerte";
    return;
  }

  div.innerHTML = data.alerts
    .map(a => `
      <div class="alert">
        <strong>${a.type}</strong> (${a.prob || 0}%)<br>
        ${a.message}
      </div>
    `)
    .join("");
}

// ==============================
// 🚀 Initialisation
// ==============================
(async function init() {
  try {
    const pos = await getUserPosition();
    await loadLocalForecast(pos.lat, pos.lon);
    await loadNationalForecast("Belgium");
    await loadForecastDays("Belgium");
    await loadBulletin("Belgium");
    await loadRadar("Belgium");
    await loadAlerts("Belgium");
  } catch (err) {
    console.error("Erreur init:", err);
    document.getElementById("local-content").innerText =
      "❌ Impossible de récupérer votre position";
  }
})();
