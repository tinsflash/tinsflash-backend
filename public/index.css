const API_BASE = "https://tinsflash-backend.onrender.com/api";

// === UTILITAIRE FETCH JSON ===
async function fetchJSON(url) {
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Erreur API ${res.status}`);
    return await res.json();
  } catch (e) {
    console.error("‚ùå Erreur API:", e);
    return null;
  }
}

// === CHARGEMENT G√âN√âRAL ===
document.addEventListener("DOMContentLoaded", () => {
  initPosition();
  document.getElementById("btnLocate").addEventListener("click", async () => {
    const addr = document.getElementById("manualAddress").value.trim();
    if (addr) await geocodeAddress(addr);
  });
});

async function initPosition() {
  const locEl = document.getElementById("user-location");
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      async (pos) => {
        const { latitude, longitude } = pos.coords;
        locEl.innerHTML = `üìç Latitude : ${latitude.toFixed(2)}, Longitude : ${longitude.toFixed(2)}`;
        await loadAll(latitude, longitude);
      },
      () => {
        locEl.innerHTML = "‚ö†Ô∏è G√©olocalisation refus√©e, utilisez le champ ci-dessous.";
      }
    );
  } else {
    locEl.innerHTML = "‚ùå G√©olocalisation non support√©e.";
  }
}

async function geocodeAddress(address) {
  try {
    const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
    const data = await res.json();
    if (!data.length) throw new Error("Adresse non trouv√©e");
    const { lat, lon, display_name } = data[0];
    document.getElementById("user-location").innerHTML = `üìç ${display_name}`;
    await loadAll(parseFloat(lat), parseFloat(lon));
  } catch (err) {
    alert(err.message);
  }
}

async function loadAll(lat, lon) {
  loadForecast(lat, lon);
  loadAlerts(lat, lon);
  initMaps(lat, lon);
}

// === PR√âVISIONS ===
async function loadForecast(lat, lon) {
  const local = document.getElementById("local-forecast");
  const national = document.getElementById("national-forecast");
  const week = document.getElementById("forecast-7days");

  local.innerHTML = national.innerHTML = week.innerHTML = "Chargement...";

  const localData = await fetchJSON(`${API_BASE}/forecast/local?lat=${lat}&lon=${lon}`);
  const nationalData = await fetchJSON(`${API_BASE}/forecast/national?lat=${lat}&lon=${lon}`);
  const weekData = await fetchJSON(`${API_BASE}/forecast/7days?lat=${lat}&lon=${lon}`);

  if (localData)
    local.innerHTML = `<b>${localData.summary}</b><br>üå° ${localData.temperature_min}¬∞C / ${localData.temperature_max}¬∞C<br>üí® ${localData.wind} km/h`;
  else local.innerHTML = "‚ùå Erreur chargement pr√©visions locales";

  if (nationalData)
    national.innerHTML = `<b>${nationalData.country}</b><br>üå° ${nationalData.temperature_min}¬∞C / ${nationalData.temperature_max}¬∞C<br>üåß ${nationalData.precipitation} mm`;
  else national.innerHTML = "‚ùå Erreur pr√©visions nationales";

  if (weekData && Array.isArray(weekData))
    week.innerHTML = weekData
      .map((d) => `<div>üìÖ ${d.date} ‚Äì ${d.summary} ‚Äì ${d.temperature_min}¬∞C / ${d.temperature_max}¬∞C</div>`)
      .join("");
  else week.innerHTML = "‚ùå Erreur pr√©visions 7 jours";
}

// === ALERTES ===
async function loadAlerts(lat, lon) {
  const alertsEl = document.getElementById("alerts");
  const data = await fetchJSON(`${API_BASE}/alerts`);
  if (!data) {
    alertsEl.innerHTML = "‚ùå Erreur chargement alertes";
    return;
  }

  const localAlerts = data.filter((a) => a.lat && Math.abs(a.lat - lat) < 5 && Math.abs(a.lon - lon) < 5);
  if (localAlerts.length > 0) {
    alertsEl.innerHTML = localAlerts
      .map((a) => `‚ö†Ô∏è <b>${a.zone || a.country}</b> ‚Äì ${a.title || a.type || "Alerte"} (${a.level || "info"})`)
      .join("<br>");
  } else {
    alertsEl.innerHTML = "‚úÖ Aucune alerte locale active";
    document.getElementById("continent-warning").innerText = "üåç Alertes sur votre continent disponibles sur la carte ci-dessous.";
  }
}

// === CARTES ===
let mapForecast, mapAlerts;
function initMaps(lat, lon) {
  if (!mapForecast) {
    mapForecast = L.map("map-forecast").setView([lat, lon], 3);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapForecast);
  } else mapForecast.setView([lat, lon], 3);

  if (!mapAlerts) {
    mapAlerts = L.map("map-alerts").setView([lat, lon], 3);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapAlerts);
  } else mapAlerts.setView([lat, lon], 3);

  L.circle([lat, lon], { color: "cyan", radius: 100000 }).addTo(mapForecast).bindPopup("Votre position");
}
