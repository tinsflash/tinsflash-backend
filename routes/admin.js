// routes/admin.js
import express from "express";
import forecastService from "../services/forecastService.js";
import Alert from "../models/Alert.js";

const router = express.Router();

//
// ===============================
// üìå Pr√©visions nationales
// ===============================
// Lire la derni√®re pr√©vision nationale
router.get("/forecasts/latest/:country", async (req, res) => {
  try {
    const forecast = await forecastService.getLatestForecast(req.params.country);
    if (!forecast) {
      return res.status(404).json({ error: "Pas de pr√©vision trouv√©e" });
    }
    res.json(forecast);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

//
// ===============================
// üìå Alertes m√©t√©o (centrale nucl√©aire IA mondiale)
// ===============================
// ‚û°Ô∏è R√©cup√©rer toutes les alertes r√©centes (derni√®res 50)
router.get("/alerts", async (req, res) => {
  try {
    const alerts = await Alert.find().sort({ createdAt: -1 }).limit(50).lean();
    res.json(alerts);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚û°Ô∏è Cr√©er une nouvelle alerte (IA J.E.A.N. ou admin)
router.post("/alerts", async (req, res) => {
  try {
    const { type, level, certainty, description, location } = req.body;

    if (!type || !level || !certainty) {
      return res.status(400).json({ error: "Champs requis manquants" });
    }

    const alert = new Alert({
      type,
      level,
      certainty,
      description,
      location
    });

    await alert.save();
    console.log(`‚úÖ Nouvelle alerte cr√©√©e : ${type} ${level} (${certainty}%)`);
    res.status(201).json(alert);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚û°Ô∏è Supprimer une alerte
router.delete("/alerts/:id", async (req, res) => {
  try {
    const result = await Alert.findByIdAndDelete(req.params.id);
    if (!result) {
      return res.status(404).json({ error: "Alerte non trouv√©e" });
    }
    console.log(`üóëÔ∏è Alerte supprim√©e (${req.params.id})`);
    res.json({ message: "Alerte supprim√©e" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚û°Ô∏è Mettre √† jour / corriger une alerte
router.put("/alerts/:id", async (req, res) => {
  try {
    const { type, level, certainty, description, location } = req.body;

    const updated = await Alert.findByIdAndUpdate(
      req.params.id,
      { type, level, certainty, description, location },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ error: "Alerte non trouv√©e" });
    }

    console.log(`‚úèÔ∏è Alerte corrig√©e (${req.params.id})`);
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

export default router;
